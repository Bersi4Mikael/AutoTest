{"name": "Тест на заголовок страницы", "status": "failed", "statusDetails": {"message": "Failed: Failed to load link: https://escortnews.eu/, Step: Opening page. Error: Message: \nStacktrace:\n\tGetHandleVerifier [0x00007FF7E3C1F922+3045234]\n\t(No symbol) [0x00007FF7E38C3652]\n\t(No symbol) [0x00007FF7E3787564]\n\t(No symbol) [0x00007FF7E37D5F9D]\n\t(No symbol) [0x00007FF7E37D606C]\n\t(No symbol) [0x00007FF7E381BDD7]\n\t(No symbol) [0x00007FF7E37F9DEF]\n\t(No symbol) [0x00007FF7E38191C4]\n\t(No symbol) [0x00007FF7E37F9B53]\n\t(No symbol) [0x00007FF7E37C813C]\n\t(No symbol) [0x00007FF7E37C8D71]\n\tGetHandleVerifier [0x00007FF7E3C4E89D+3237613]\n\tGetHandleVerifier [0x00007FF7E3C90BA7+3508727]\n\tGetHandleVerifier [0x00007FF7E3C8976F+3478975]\n\tGetHandleVerifier [0x00007FF7E39FF1C6+815126]\n\t(No symbol) [0x00007FF7E38CED0F]\n\t(No symbol) [0x00007FF7E38C9854]\n\t(No symbol) [0x00007FF7E38C99E2]\n\t(No symbol) [0x00007FF7E38BA574]\n\tBaseThreadInitThunk [0x00007FFFB94A257D+29]\n\tRtlUserThreadStart [0x00007FFFB97AAA48+40]", "trace": "link = 'https://escortnews.eu/'\n\n    @pytest.mark.parametrize(\"link\", get_links())\n    @allure.feature(\"Моя фича\")\n    @allure.story(\"Мой сценарий\")\n    @allure.title(\"Тест на заголовок страницы\")\n    def test_links(link):\n        # Запускаем веб-браузер перед каждым тестом\n        options = webdriver.ChromeOptions()\n        driver = webdriver.Chrome()  # Укажите путь к исполняемому файлу браузера, если он отличается от Chrome\n        driver = webdriver.Chrome(options=options)\n        driver.set_window_size(1280, 1024)\n    \n        try:\n            # Переходим по ссылке\n            driver.get(link)\n    \n            # Используем WebDriverWait для ожидания загрузки страницы\n            WebDriverWait(driver, wait_time).until(EC.title_contains(\"escort\"))\n    \n            # Закрытие приветственного окна\n            element = WebDriverWait(driver, wait_time).until(\n                EC.presence_of_element_located((By.XPATH, \"//*[@id='render-box']/button\"))\n            )\n            element.click()\n    \n            # Переход на Стр. авторизации\n            element = WebDriverWait(driver, wait_time).until(\n                EC.presence_of_element_located((By.XPATH, \"//div[@class='hamburger']\"))\n            )\n            element.click()\n    \n            element = WebDriverWait(driver, wait_time).until(\n                EC.presence_of_element_located((By.XPATH, \"/html/body/header/div[4]/nav/ul/li[22]\"))\n            )\n            element.click(), f\"Failed to load link: {link}, Step: Login page\"\n    \n            # Ввод данных и вход\n>           element = WebDriverWait(driver, wait_time).until(\n                EC.presence_of_element_located((By.XPATH, \"//input[@id='form-user']\"))\n            )\n\ntests\\test_login.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"3e869f23b47a6ca885c7fa0e4bbd7514\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x0000021E50013420>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7E3C1F922+3045234]\nE       \t(No symbol) [0x00007FF7E38C3652]\nE       \t(No symbol) [0x00007FF7E3787564]\nE       \t(No symbol) [0x00007FF7E37D5F9D]\nE       \t(No symbol) [0x00007FF7E37D606C]\nE       \t(No symbol) [0x00007FF7E381BDD7]\nE       \t(No symbol) [0x00007FF7E37F9DEF]\nE       \t(No symbol) [0x00007FF7E38191C4]\nE       \t(No symbol) [0x00007FF7E37F9B53]\nE       \t(No symbol) [0x00007FF7E37C813C]\nE       \t(No symbol) [0x00007FF7E37C8D71]\nE       \tGetHandleVerifier [0x00007FF7E3C4E89D+3237613]\nE       \tGetHandleVerifier [0x00007FF7E3C90BA7+3508727]\nE       \tGetHandleVerifier [0x00007FF7E3C8976F+3478975]\nE       \tGetHandleVerifier [0x00007FF7E39FF1C6+815126]\nE       \t(No symbol) [0x00007FF7E38CED0F]\nE       \t(No symbol) [0x00007FF7E38C9854]\nE       \t(No symbol) [0x00007FF7E38C99E2]\nE       \t(No symbol) [0x00007FF7E38BA574]\nE       \tBaseThreadInitThunk [0x00007FFFB94A257D+29]\nE       \tRtlUserThreadStart [0x00007FFFB97AAA48+40]\n\nC:\\Users\\bersi\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nlink = 'https://escortnews.eu/'\n\n    @pytest.mark.parametrize(\"link\", get_links())\n    @allure.feature(\"Моя фича\")\n    @allure.story(\"Мой сценарий\")\n    @allure.title(\"Тест на заголовок страницы\")\n    def test_links(link):\n        # Запускаем веб-браузер перед каждым тестом\n        options = webdriver.ChromeOptions()\n        driver = webdriver.Chrome()  # Укажите путь к исполняемому файлу браузера, если он отличается от Chrome\n        driver = webdriver.Chrome(options=options)\n        driver.set_window_size(1280, 1024)\n    \n        try:\n            # Переходим по ссылке\n            driver.get(link)\n    \n            # Используем WebDriverWait для ожидания загрузки страницы\n            WebDriverWait(driver, wait_time).until(EC.title_contains(\"escort\"))\n    \n            # Закрытие приветственного окна\n            element = WebDriverWait(driver, wait_time).until(\n                EC.presence_of_element_located((By.XPATH, \"//*[@id='render-box']/button\"))\n            )\n            element.click()\n    \n            # Переход на Стр. авторизации\n            element = WebDriverWait(driver, wait_time).until(\n                EC.presence_of_element_located((By.XPATH, \"//div[@class='hamburger']\"))\n            )\n            element.click()\n    \n            element = WebDriverWait(driver, wait_time).until(\n                EC.presence_of_element_located((By.XPATH, \"/html/body/header/div[4]/nav/ul/li[22]\"))\n            )\n            element.click(), f\"Failed to load link: {link}, Step: Login page\"\n    \n            # Ввод данных и вход\n            element = WebDriverWait(driver, wait_time).until(\n                EC.presence_of_element_located((By.XPATH, \"//input[@id='form-user']\"))\n            )\n            element.send_keys(\"Cawinom212\")\n    \n            element = WebDriverWait(driver, wait_time).until(\n                EC.presence_of_element_located((By.XPATH, \"//input[@id='form-pass']\"))\n            )\n            element.send_keys(\"Cawinom212\")\n    \n            element = WebDriverWait(driver, wait_time).until(\n                EC.presence_of_element_located((By.XPATH, \"//input[@id='submit-login']\"))\n            )\n            element.click()\n    \n            # Далее можно добавить какие-то проверки на содержимое страницы или другие действия\n            # Пример: Проверка, что заголовок страницы содержит определенный текст\n            assert \"escort\" in driver.title, f\"Failed to load link: {link}, Step: Opening page\"\n    \n        except Exception as e:\n            # Если произошла ошибка, добавляем ее в отчет pytest с указанием шага\n>           pytest.fail(f\"Failed to load link: {link}, Step: Opening page. Error: {e}\")\nE           Failed: Failed to load link: https://escortnews.eu/, Step: Opening page. Error: Message: \nE           Stacktrace:\nE           \tGetHandleVerifier [0x00007FF7E3C1F922+3045234]\nE           \t(No symbol) [0x00007FF7E38C3652]\nE           \t(No symbol) [0x00007FF7E3787564]\nE           \t(No symbol) [0x00007FF7E37D5F9D]\nE           \t(No symbol) [0x00007FF7E37D606C]\nE           \t(No symbol) [0x00007FF7E381BDD7]\nE           \t(No symbol) [0x00007FF7E37F9DEF]\nE           \t(No symbol) [0x00007FF7E38191C4]\nE           \t(No symbol) [0x00007FF7E37F9B53]\nE           \t(No symbol) [0x00007FF7E37C813C]\nE           \t(No symbol) [0x00007FF7E37C8D71]\nE           \tGetHandleVerifier [0x00007FF7E3C4E89D+3237613]\nE           \tGetHandleVerifier [0x00007FF7E3C90BA7+3508727]\nE           \tGetHandleVerifier [0x00007FF7E3C8976F+3478975]\nE           \tGetHandleVerifier [0x00007FF7E39FF1C6+815126]\nE           \t(No symbol) [0x00007FF7E38CED0F]\nE           \t(No symbol) [0x00007FF7E38C9854]\nE           \t(No symbol) [0x00007FF7E38C99E2]\nE           \t(No symbol) [0x00007FF7E38BA574]\nE           \tBaseThreadInitThunk [0x00007FFFB94A257D+29]\nE           \tRtlUserThreadStart [0x00007FFFB97AAA48+40]\n\ntests\\test_login.py:76: Failed"}, "parameters": [{"name": "link", "value": "'https://escortnews.eu/'"}], "start": 1713795085541, "stop": 1713795107653, "uuid": "70091def-13ae-4d0e-84f5-2252f682c187", "historyId": "a9cd0bf6b88386d02ed2cafc0a38296c", "testCaseId": "a4341ef11e2e4da24bc665da71ba82f5", "fullName": "tests.test_login#test_links", "labels": [{"name": "story", "value": "Мой сценарий"}, {"name": "feature", "value": "Моя фича"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "Bersi4Mikael"}, {"name": "thread", "value": "18180-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}]}